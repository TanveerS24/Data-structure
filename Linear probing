#include <stdio.h>
#include <stdlib.h>
#define TABLE_SIZE 10
int hash_function(int key) {
return key % TABLE_SIZE;
}
void insert(int hash_table[], int key) {
int index = hash_function(key);
if (hash_table[index] == 0) {
hash_table[index] = key;
} else {
int i = 1;
while (hash_table[(index + i) % TABLE_SIZE] != 0) {
i++;
}
hash_table[(index + i) % TABLE_SIZE] = key;
}
}
int search(int hash_table[], int key) {
int index = hash_function(key);
if (hash_table[index] == key) {
return index;
} else {
int i = 1;
while (hash_table[(index + i) % TABLE_SIZE] != key && hash_table[(index + i) % TABLE_SIZE] != 0) {
i++;
}
if (hash_table[(index + i) % TABLE_SIZE] == key) {
return (index + i) % TABLE_SIZE;
} else {
return -1;
}
}
}
void print_table(int hash_table[]) {
printf("\nHash Table: \n");
for (int i = 0; i < TABLE_SIZE; i++) {
printf("%d ", hash_table[i]);
}
printf("\n");
}
int main() {
int hash_table[TABLE_SIZE] = {0};
insert(hash_table, 12);
insert(hash_table, 25);
insert(hash_table, 37);
insert(hash_table, 49);
insert(hash_table, 61);
insert(hash_table, 73);
insert(hash_table, 85);
print_table(hash_table);
int key = 37;
int index = search(hash_table, key);
if (index != -1) {
printf("\nKey %d found at index %d\n", key, index);
} else {
printf("\nKey %d not found\n", key);
}
key = 97;
index = search(hash_table, key);
if (index != -1) {
printf("\nKey %d found at index %d\n", key, index);
} else {
printf("\nKey %d not found\n", key);
}
return 0;
}

INPUT/OUTPUT:
Hash Table: 
0 61 12 73 0 25 85 37 0 49 
Key 37 found at index 7
Key 97 not found
